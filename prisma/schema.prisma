generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int       @id @default(autoincrement())
  loginId       String?   @unique
  password      String?
  email         String?   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  profile       Profile?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Profile {
  profileId Int       @id @default(autoincrement())
  userId    Int       @unique
  nickName  String    @unique
  name      String
  phoneNum  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  posts     Post[]
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [userId])

  @@map("profiles")
}

model Board {
  boardId  Int     @id @default(autoincrement())
  name     String
  isActive Boolean @default(true)
  posts    Post[]

  @@map("boards")
}

model Post {
  postId    Int       @id @default(autoincrement())
  profileId Int
  boardId   Int
  nickName  String
  title     String
  content   String
  view      Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  profile   Profile   @relation(fields: [profileId], references: [profileId])
  board     Board     @relation(fields: [boardId], references: [boardId])
  comments  Comment[]

  @@map("posts")
}

model Comment {
  commentId Int       @id @default(autoincrement())
  postId    Int
  profileId Int
  nickName  String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  post      Post      @relation(fields: [postId], references: [postId])
  profile   Profile   @relation(fields: [profileId], references: [profileId])

  @@map("comments")
}

model Attachment {
  attachmentId String @id @default(cuid())
  filename     String
  contentType  String
  size         Int
  url          String

  @@map("attachments")
}
