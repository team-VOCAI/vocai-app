generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int       @id @default(autoincrement())
  loginId   String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  profile   Profile?

  @@map("users")
}

model Profile {
  profileId Int       @id @default(autoincrement())
  userId    Int       @unique
  nickName  String    @unique
  name      String
  phoneNum  String
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  comments  Comment[]
  posts     Post[]
  user      User      @relation(fields: [userId], references: [userId])
  mockInterviewSessions MockInterviewSession[]

  @@map("profiles")
}

model Board {
  boardId     Int     @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean @default(true)
  posts       Post[]

  @@map("boards")
}

model Post {
  postId      Int      @id @default(autoincrement())
  profileId   Int
  boardId     Int
  nickName    String
  title       String
  content     String
  view        Int      @default(0)
  // 메타정보 필드 추가
  company     String?  // 기업명 (선택사항)
  jobCategory String?  // 직무 카테고리
  tags        String?  // 태그 (쉼표로 구분)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  profile     Profile  @relation(fields: [profileId], references: [profileId])
  board       Board    @relation(fields: [boardId], references: [boardId])
  comments    Comment[]
  attachments Attachment[]

  // 검색 성능을 위한 인덱스
  @@index([company])
  @@index([jobCategory])
  @@map("posts")
}

model Comment {
  commentId Int       @id @default(autoincrement())
  postId    Int
  profileId Int
  nickName  String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  post      Post      @relation(fields: [postId], references: [postId])
  profile   Profile   @relation(fields: [profileId], references: [profileId])

  @@map("comments")
}

model Attachment {
  attachmentId Int      @id @default(autoincrement())
  postId       Int
  fileName     String
  fileSize     Int
  fileType     String
  fileData     Bytes    // PostgreSQL BYTEA 타입
  createdAt    DateTime @default(now())
  post         Post     @relation(fields: [postId], references: [postId])

  @@map("attachments")
}

model MockInterviewSession {
  sessionId  Int                    @id @default(autoincrement())
  profileId  Int                   
  persona    Json
  records    MockInterviewRecord[]
  summary      String?
  feedback     String?
  createdAt    DateTime              @default(now())
  deletedAt    DateTime?
  profile    Profile               @relation(fields: [profileId], references: [profileId], onDelete: Cascade)
}

model MockInterviewRecord {
  interviewId  Int                  @id @default(autoincrement())
  sessionId    Int
  question     String
  answerText   String
  summary      String?
  feedback     String?
  createdAt    DateTime            @default(now())
  deletedAt    DateTime?
  session      MockInterviewSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
}
